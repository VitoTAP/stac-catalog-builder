### Python ###
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class


### IDEs ###

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/

# VS code
.vscode/


### Environments ###
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version


### Other ###

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST


# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/


# Sphinx documentation
docs/_build/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py


# Spyder project settings
.spyderproject
.spyproject


# mypy
.mypy_cache/
.dmypy.json
dmypy.json


# ruff
.ruff_cache/


# LSP config files
# pyrightconfig.json


# Having a .local folder that is ignored by git is often handy for files that you want
# to keep near your code but that are not part of the git repo because they won't work for everyone.
# For example your own configuration files for testing that will only work in your
# own development environment.
# Off course, you could also put them outside your git working dir, but sometimes
# having everything inside the workspace makes things simpler.
.local


# Sometimes test output from generating STAC collections goes here
# Though we are avoiding that more and more now.
# The unit tests no longer use it.
tmp/


# statistics files for profiling performance, output of the cProfile module.
*.stats

**/results/**